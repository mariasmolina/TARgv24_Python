import tkinter as tk
import sqlite3, requests, random, json, string, smtplib, ssl
from tkinter import messagebox, ttk
from customtkinter import *   # —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è Tkinter, –∫–æ—Ç–æ—Ä–æ–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É CTk
from CTkSpinbox import *
from ttkthemes import ThemedTk
from PIL import Image
from email.message import EmailMessage
from Isikukood_Modul import *
from DB_funktsioonid import *


def print_patsiendid():
    """ –í—ã–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ (–¥–ª—è —Å–µ–±—è) """
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn=sqlite3.connect("Arvestus/AppData/haigla.db")
    cursor=conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    print("\n√úhenduse loomine andmebaasiga √µnnestus")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã patsiendid
    cursor.execute("""SELECT * FROM patsiendid""")
    patsiendid=cursor.fetchall()

    cursor.execute("""SELECT * FROM kasutajad""")
    kasutajad=cursor.fetchall()

    if not patsiendid:
        print("\nTabel 'patsiendid' on t√ºhi")
    else:
        print("\nAndmed tabelist patsiendid:")
        for patient in patsiendid:
            print(patient)

    if not kasutajad:
        print("\nTabel 'kasutajad' on t√ºhi")
    else:
        print("\n\nAndmed tabelist kasutajad:")
        for kasutaja in kasutajad:
            print(kasutaja) 

    conn.close()


def sisselogimine_aken():
    """ –§–æ—Ä–º–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –¥–ª—è –º–µ–¥—Å–µ—Å—Ç–µ—Ä –∏ –≤—Ä–∞—á–µ–π """
    global sisend_kasutajanimi, sisend_parool, aken_login
    
    pilt_login_src=Image.open("Arvestus/pildid/login_pilt.png")
    smart_id_src=Image.open("Arvestus/pildid/smart_id.png")
    pilt_login=CTkImage(light_image=pilt_login_src, size=(300, 480))  # CustomTkinter —Ç—Ä–µ–±—É–µ—Ç —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä (light_image –∏–ª–∏ dark_image)
    smart_id=CTkImage(light_image=smart_id_src, size=(120, 45))

    aken_login=CTk()
    aken_login.title("HaiglaAssist - Autoriseerimine")
    aken_login.geometry("600x480")
    aken_login.resizable(0,0)  # –Ω–µ–ª—å–∑—è –ø–æ–º–µ–Ω—è—Ç—å —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
    print_patsiendid()

    CTkLabel(aken_login, text="", image=pilt_login).pack(expand=True, side="left")  # expand=True - –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ

    frame=CTkFrame(aken_login, width=300, height=480, fg_color="white")
    frame.pack_propagate(0)   # –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä Frame (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é Frame –∏–∑–º–µ–Ω—è–µ—Ç —Å–≤–æ–∏ —Ä–∞–∑–º–µ—Ä—ã
    frame.pack(expand=True, side="right")

    CTkLabel(frame, text="Hailga Assist", text_color="#55b3d9", anchor="w", justify="left", font=("Nunito", 24, "bold")).pack(anchor="w", pady=(50, 5), padx=(25, 0))
    CTkLabel(frame, text="Logige oma kontole sisse", text_color="#7E7E7E", anchor="w", justify="left", font=("Nunito", 14)).pack(anchor="w", padx=(25, 0))

    CTkLabel(frame, text="üë§ Kasutajanimi", text_color="#008ba9", anchor="w", justify="left", font=("Nunito", 16), compound="left").pack(anchor="w", pady=(38, 0), padx=(25, 0))
    sisend_kasutajanimi=CTkEntry(frame, width=225, fg_color="#EEEEEE", border_color="#55b3d9", border_width=1, text_color="black")
    sisend_kasutajanimi.pack(anchor="w", padx=(25, 0))

    CTkLabel(frame, text="üîí Parool", text_color="#008ba9", anchor="w", justify="left", font=("Nunito", 16), compound="left").pack(anchor="w", pady=(21, 0), padx=(25, 0))
    sisend_parool=CTkEntry(frame, width=225, fg_color="#EEEEEE", border_color="#55b3d9", border_width=1, text_color="black", show="*")
    sisend_parool.pack(anchor="w", padx=(25, 0))

    logi_sisse_nupp=CTkButton(frame, text="Logi sisse", fg_color="#55b3d9", hover_color="#008ba9", font=("Nunito", 16, "bold"), text_color="white", width=225, command=sisselogimine_kasutaja)
    logi_sisse_nupp.pack(anchor="w", pady=(30, 0), padx=(25, 0))

    smart_id_nupp=CTkButton(frame, text="", fg_color="white", hover_color="white", image=smart_id, command=message)
    smart_id_nupp.pack(anchor="w", pady=(30, 0), padx=(65, 0))

    aken_login.mainloop()


def message():
    """ –°–æ–æ–±—â–µ–Ω–∏–µ, –¥–ª—è —á–∞—Å—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ """
    messagebox.showwarning("Vabandage!", "Ajutiselt v√§ljat√∂√∂tamisel!")


def sisselogimine_kasutaja():
    """ –§—É–Ω–∫—Ü–∏—è —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –º–µ–¥—Å–µ—Å—Ç–µ—Ä –∏ –≤—Ä–∞—á–µ–π """
    global amet, nimi
    kasutajanimi=sisend_kasutajanimi.get()
    parool=sisend_parool.get()

    conn=sqlite3.connect("Arvestus/AppData/haigla.db")
    cursor=conn.cursor()

    cursor.execute("""
    SELECT nimi, amet 
    FROM kasutajad 
    WHERE kasutajanimi=? AND parool=? 
    """, (kasutajanimi, parool))
    kasutaja=cursor.fetchone()
    conn.close()

    if kasutaja:
        nimi, amet=kasutaja
        messagebox.showinfo("Tere tulemast!", f"Tere tulemast, {nimi}! \n\nSisse logitud kui {amet}")
        
        aken_login.destroy()   # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ
        patsiendide_andmed(nimi, amet)  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    else:
        messagebox.showerror("Viga", "Vale kasutajanimi v√µi parool!")


def patsiendide_andmed(nimi, amet):
    """ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ """
    global tree, search_entry, peamine_aken

    peamine_aken=ThemedTk(theme="adapta") # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞ –º–æ–¥—É–ª—å —Å —Ç–µ–º–æ–π
    peamine_aken.title("Haigla Assist")
    peamine_aken.geometry("1250x500")
    peamine_aken.configure(background="#55b3d9")
    peamine_aken.resizable(0,0)

    # –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫
    nupude_frame = CTkFrame(peamine_aken, width=200, fg_color="#55b3d9")
    nupude_frame.pack_propagate(0)
    nupude_frame.pack(side="right", fill="y")

    logo_src=Image.open("Arvestus/pildid/hospital.png")
    logo_pilt=CTkImage(light_image=logo_src, size=(130, 130))
    CTkLabel(nupude_frame, text="", image=logo_pilt).pack(pady=(30, 40), padx=10)

    lisa_nupp=CTkButton(nupude_frame, text="‚ûï Lisa andmeid", command=lisa_patsient, fg_color="#55b3d9", hover_color="#008ba9", font=("Nunito", 16, "bold"), text_color="white")
    lisa_nupp.pack(padx=10, pady=10, ipady=5)
    
    osakond_nupp=CTkButton(nupude_frame, text="üìã Kuva osakond", command=osakond_aken, fg_color="#55b3d9", hover_color="#008ba9", font=("Nunito", 16, "bold"), text_color="white")
    osakond_nupp.pack(pady=10, ipady=5)
    
    if amet=="arst":
        filter_nupp=CTkButton(nupude_frame, text="üë• Minu patsiendid", command=lambda: load_data_from_db(tree, arst_nimi=nimi), fg_color="#55b3d9", hover_color="#008ba9", font=("Nunito", 16, "bold"), text_color="white")
        filter_nupp.pack(pady=(10,0), ipady=5)
    
    logi_valja_nupp=CTkButton(nupude_frame, text="‚ûú Logi v√§lja", command=lambda: (peamine_aken.destroy(), sisselogimine_aken()), fg_color="white", hover_color="#01608b", font=("Nunito", 16, "bold"), text_color="#55b3d9")
    logi_valja_nupp.pack(side="bottom", pady=50, ipady=5)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
    frame=CTkFrame(peamine_aken, fg_color="white")
    frame.pack(pady=20, side="left", expand=True, fill="both")

    # –í–µ—Ä—Ö–Ω—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
    info_frame=CTkFrame(frame, fg_color="white", height=50)
    info_frame.pack(fill="x")
    
    tanane_kuupaev=datetime.today().strftime('%d.%m.%Y')
    
    vasak_frame=CTkFrame(info_frame, fg_color="white")
    vasak_frame.pack(side="left", padx=20, pady=5)
    
    CTkLabel(vasak_frame, text="Amet:", font=("Nunito", 16, "bold"), anchor="w", text_color="#01608b").pack(anchor="w")
    CTkLabel(vasak_frame, text="Nimi:", font=("Nunito", 16, "bold"), anchor="w", text_color="#01608b").pack(anchor="w")
    CTkLabel(vasak_frame, text="Kuup√§ev:", font=("Nunito", 16, "bold"), anchor="w", text_color="#01608b").pack(anchor="w")
    
    parem_frame=CTkFrame(info_frame, fg_color="white")
    parem_frame.pack(side="left", padx=10, pady=5)
    
    CTkLabel(parem_frame, text=f"{amet}", font=("Nunito", 16), anchor="w", text_color="#01608b").pack(anchor="w")
    CTkLabel(parem_frame, text=f"{nimi}", font=("Nunito", 16), anchor="w", text_color="#01608b").pack(anchor="w")
    CTkLabel(parem_frame, text=f"{tanane_kuupaev}", font=("Nunito", 16), anchor="w", text_color="#01608b").pack(anchor="w")
    
    CTkLabel(info_frame, text="HailgaAssist", font=("Comfortaa", 50, "bold"), text_color="#55b3d9").pack(side="right", padx=(20,100))
    
    # –ü–æ–∏—Å–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    search_frame=CTkFrame(frame, fg_color="#EEEEEE")
    search_frame.pack(side="top", fill="x", padx=10, pady=10, ipady=15)
    
    search_label=CTkLabel(search_frame, text="Otsi patsient isikukoodi j√§rgi:", font=("Nunito", 14))
    search_label.pack(side=tk.LEFT, padx=5)

    search_entry=CTkEntry(search_frame, border_color="#55b3d9", border_width=2,)
    search_entry.pack(side=tk.LEFT, padx=10)

    search_button=CTkButton(search_frame, text="Otsi", command=on_search, fg_color="#55b3d9", hover_color="#008ba9", font=("Nunito", 16, "bold"), text_color="white")
    search_button.pack(side=tk.LEFT, padx=10)

    refresh_button=CTkButton(search_frame, text="V√§rskenda tabel", command=lambda:load_data_from_db(tree), fg_color="#55b3d9", hover_color="#008ba9", font=("Nunito", 16, "bold"), text_color="white")
    refresh_button.pack(side=tk.LEFT, padx=10)
    
    # –¢–∞–±–ª–∏—Ü–∞
    table_frame=CTkFrame(frame)
    table_frame.pack(fill="both", expand=True)
    
    scrollbar=CTkScrollbar(table_frame, fg_color="white")
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
    
    tree=ttk.Treeview(table_frame, yscrollcommand=scrollbar.set, columns=("Eesnimi", "Perekonnanimi", "Isikukood", "Registreerimise aeg", "Palati nr", "Arst", "Diagnoos", "Staatus"), show="headings")
    tree.bind("<Double-1>", lambda event: valitud_patsient(tree))
    tree.pack(side="top", fill="both", expand=True)

    # –°–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å —Ç–∞–±–ª–∏—Ü–µ–π
    scrollbar.configure(command=tree.yview)

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
    tree.heading("Eesnimi", text="Eesnimi")
    tree.heading("Perekonnanimi", text="Perekonnanimi")
    tree.heading("Isikukood", text="Isikukood")
    tree.heading("Registreerimise aeg", text="Registreerimise aeg")
    tree.heading("Palati nr", text="Palati nr")
    tree.heading("Arst", text="Arst")
    tree.heading("Diagnoos", text="Diagnoos")
    tree.heading("Staatus", text="Staatus")


    # –®–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
    tree.column("Eesnimi", width=100)
    tree.column("Perekonnanimi", width=150)
    tree.column("Isikukood", width=70)
    tree.column("Registreerimise aeg", width=110)
    tree.column("Palati nr", width=50)
    tree.column("Arst", width=100)
    tree.column("Diagnoos", width=200)
    tree.column("Staatus", width=130)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    load_data_from_db(tree)

    peamine_aken.mainloop()


# --- –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞—Ü–∏–µ–Ω—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü—ã -------------------------------
def valitud_patsient(tree):
    """ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ (–ø—Ä–∏ –¥–≤–æ–π–Ω–æ–º –∫–ª–∏–∫–µ –Ω–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞) """
    global patsiendi_info, patient_data

    valik=tree.selection()
    if not valik:
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    values=tree.item(valik, "values")
    isikukood=values[2]  # –ò–Ω–¥–µ–∫—Å 2 - —ç—Ç–æ —Å—Ç–æ–ª–±–µ—Ü "Isikukood"

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    conn=sqlite3.connect("Arvestus/AppData/haigla.db")
    cursor=conn.cursor()

    cursor.execute("""
        SELECT eesnimi, perekonnanimi, email, isikukood, kaal, pikkus, 
        ylemine_rohk, madalam_rohk, temperatuur, dieet, palati_nr, arst_ID, staatus, diagnoos 
        FROM patsiendid WHERE isikukood = ? 
        """, (isikukood,))
    patient_data=cursor.fetchone()
    
    conn.close()

    if not patient_data:
        messagebox.showerror("Viga", "Patsiendi andmeid ei leitud!")
        return

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ
    patsiendi_info=CTkToplevel(peamine_aken)
    patsiendi_info.title("Patsiendi andmed")
    patsiendi_info.geometry("400x600")
    patsiendi_info.resizable(0,0)

    # C–æ–∑–¥–∞—ë–º –≤–∫–ª–∞–¥–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (notebook)
    notebook=ttk.Notebook(patsiendi_info, style="TNotebook")
    notebook.pack(fill="both", expand=True)
    style=ttk.Style()
    style.configure("TNotebook", background="#EEEEEE") 

    # –í–∫–ª–∞–¥–∫–∞ - Patsiendi andmed
    info_frame=ttk.Frame(notebook)
    notebook.add(info_frame, text="Andmed")

    labels=["Eesnimi", "Perekonnanimi", "E-mail", "Isikukood", "S√ºnniaeg", "Sugu", "Kaal (kg)", "Pikkus (cm)", "√úlemine r√µhk", "Alumine r√µhk", "Temperatuur", "Dieet", "Palati nr", "Arst", "Staatus"]
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –≤—Ä–∞—á–∞ –ø–æ ID
    arst_id=patient_data[11]
    conn=sqlite3.connect("Arvestus/AppData/haigla.db")
    cursor=conn.cursor()
    cursor.execute("""
    SELECT nimi 
    FROM kasutajad 
    WHERE ID = ? 
    """, (arst_id,))
    arst_nimi=cursor.fetchone()
    conn.close()

    if arst_nimi:
        arst_nimi=arst_nimi[0]
    else:
        arst_nimi="M√§√§ramata"

    # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –≤–æ–∑—Ä–∞—Å—Ç —Å –ø–æ–º–æ—â—å—é –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–∏–∫—É–∫–æ–¥–∞
    synniaeg=leia_synniaeg(isikukood)
    sugu=leia_sugu(isikukood)

    patient_data=list(patient_data)
    patient_data[11]=arst_nimi  # –ó–∞–º–µ–Ω—è–µ–º ID –≤—Ä–∞—á–∞ –Ω–∞ –∏–º—è
    patient_data.insert(4, synniaeg.strftime("%d.%m.%Y"))  # –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
    patient_data.insert(5, sugu)  # –í–æ–∑—Ä–∞—Å—Ç

    # –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
    for i, label in enumerate(labels):    # enumerate - —Å–æ–∑–¥–∞—ë—Ç –ø–∞—Ä—ã (–∏–Ω–¥–µ–∫—Å, –∑–Ω–∞—á–µ–Ω–∏–µ)
        ttk.Label(info_frame, text=label + ":", font=("Nunito", 11, "bold"), foreground="#008ba9", background="#fafbfc").grid(row=i, column=0, sticky="w", padx=10, pady=5)
        ttk.Label(info_frame, text=str(patient_data[i]), font=("Nunito", 11), background="#fafbfc").grid(row=i, column=1, sticky="w", padx=10, pady=5)

    # –ï—Å–ª–∏ —Ä–æ–ª—å –≤—Ä–∞—á–∞ –∏ —Å—Ç–∞—Ç—É—Å "–í –æ–∂–∏–¥–∞–Ω–∏–∏ –æ—Å–º–æ—Ç—Ä–∞ –≤—Ä–∞—á–∞" --> –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ø–∏–∫—Ä–∏–∑–∞
    epikriis_nupp=CTkButton(info_frame, text="üìå Lisa epikriis", command=lambda: lisa_epikriis(isikukood), fg_color="#55b3d9", hover_color="#008ba9", font=("Nunito", 16, "bold"), text_color="white")
    if amet=="arst":
        epikriis_nupp.grid(row=len(labels)+ 1, column=0, rowspan=1, padx=10, pady=30)

    # –ï—Å–ª–∏ —Ä–æ–ª—å –≤—Ä–∞—á–∞ –∏ —Å—Ç–∞—Ç—É—Å "–û—Å–º–æ—Ç—Ä–µ–Ω –≤—Ä–∞—á–µ–º" --> –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–ø–∏—Å–∫–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    valja_kirjutada_nupp=CTkButton(info_frame, text="üìß V√§lja kirjutada", command=on_update, fg_color="#55b3d9", hover_color="#008ba9", font=("Nunito", 16, "bold"), text_color="white")
    staatus=patient_data[14]
    if amet=="arst" and  staatus=="Arsti poolt l√§bivaadatud":
        valja_kirjutada_nupp.grid(row=len(labels)+ 1, column=1, rowspan=1, padx=10, pady=30)


    # –í–∫–ª–∞–¥–∫–∞ - P√§evik
    diary_frame=ttk.Frame(notebook)
    notebook.add(diary_frame, text="P√§evik")

    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    paevik=tk.Label(diary_frame, width=60, height=20)
    paevik.pack(padx=10, pady=10)
    
    conn=sqlite3.connect("Arvestus/AppData/haigla.db")
    cursor=conn.cursor()
    cursor.execute("""
    SELECT p.kommentaar, p.kaebus, k.nimi AS arst_nimi 
    FROM patsiendid p 
    LEFT JOIN kasutajad k ON p.arst_ID=k.id 
    WHERE p.isikukood = ? AND k.nimi = ? 
    """, (isikukood, arst_nimi))
    diary_entries=cursor.fetchall()
    conn.close()


    for entry in diary_entries:
        # –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑ CTkTextbox
        diary_text=CTkTextbox(paevik, width=600, height=470, font=("Nunito", 14), text_color="#333333", wrap="word")
        diary_text.pack(padx=10, pady=10, fill='both', expand=True)
    
        if entry[0]:  # –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –ø—É—Å—Ç–æ–π
            lisa_text=f"Kaebus: {entry[1]}\n\n{entry[2]}:\n{entry[0]}\n"
        else:  # –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—É—Å—Ç–æ–π
            lisa_text=f"Kaebus: {entry[1]}"
    
        diary_text.insert("1.0", lisa_text)
        diary_text.configure(state="disabled")
    
    kommentaar_nupp=CTkButton(diary_frame, text="Lisa kommentaar", command=message, fg_color="#55b3d9", hover_color="#008ba9", font=("Nunito", 16, "bold"), text_color="white")
    kommentaar_nupp.pack(pady=10)


def lisa_epikriis(isikukood):
    """ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ø–∏–∫—Ä–∏–∑–∞ –≤—Ä–∞—á–æ–º """
    global kommentaar

    if patsiendi_info:   
        patsiendi_info.destroy() 
    epikriz_aken=CTkToplevel()
    epikriz_aken.title("Epikriis")
    epikriz_aken.geometry("400x450")
    epikriz_aken.resizable(0,0)

    CTkLabel(epikriz_aken, text="Diagnoos:", font=("Nunito", 16, "bold"), text_color="#008ba9").pack(pady=10)
    diagnoos_entry=CTkEntry(epikriz_aken, width=300, border_color="#55b3d9")
    diagnoos_entry.pack(pady=10)

    CTkLabel(epikriz_aken, text="Kommentaar:", font=("Nunito", 16, "bold"), text_color="#008ba9").pack(pady=10)
    kommentaar_text=CTkTextbox(epikriz_aken, height=200, width=300)
    kommentaar_text.pack(pady=10)


    def salvesta_epikriis():
        """ –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–ø–∏–∫—Ä–∏–∑–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ """
        diagnoos=diagnoos_entry.get()
        kommentaar = kommentaar_text.get("1.0", tk.END).strip()

        if diagnoos=="" or kommentaar=="":
            messagebox.showerror("Viga", "Diagnoos ja kommentaar on kohustuslikud!")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —ç–ø–∏–∫—Ä–∏–∑
        conn=sqlite3.connect("Arvestus/AppData/haigla.db")
        cursor=conn.cursor()
        cursor.execute("""
            UPDATE patsiendid 
            SET diagnoos = ?, kommentaar = ?, staatus = ? 
            WHERE isikukood = ? 
            """, (diagnoos, kommentaar, "Arsti poolt l√§bivaadatud", isikukood))
        conn.commit()
        conn.close()

        messagebox.showinfo("Edu", "Epikriis on salvestatud ja staatus muudetud!")
        epikriz_aken.destroy()


    save_button=CTkButton(epikriz_aken, text="Salvesta epikriis", command=salvesta_epikriis, fg_color="#55b3d9", hover_color="#008ba9", font=("Nunito", 16, "bold"), text_color="white")
    save_button.pack(pady=20)


# --- –í—ã–ø–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞ ---
def on_update():
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤ Treeview """
    selected_item=tree.selection()  # –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä—è–¥
    if selected_item:
        isikukood=selected_item[0]  # id (ID)
        patsiendi_valja_kirjutamine(isikukood)
    else:
        messagebox.showwarning("Valik puudub", "Palun vali k√µigepealt rida!")

def patsiendi_valja_kirjutamine(isikukood):
    """ –í—ã–ø–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–∑ –±–æ–ª—å–Ω–∏—Ü—ã """
    global koduravi_text, paevad_haiglas

    if patsiendi_info:   
        patsiendi_info.destroy() 
    
    valja_kirjutamine_aken=ThemedTk(theme="arc")
    valja_kirjutamine_aken.title("Koduravi ja arve patsiendile")
    valja_kirjutamine_aken.geometry("400x450")
    valja_kirjutamine_aken.resizable(0,0)

    CTkLabel(valja_kirjutamine_aken, text="Sisestage patsiendi n√µuanded koduse raviks:", font=("Nunito", 16, "bold"), text_color="#008ba9").pack(padx=10, pady=10)
    koduravi_text=CTkTextbox(valja_kirjutamine_aken, height=230, width=300)
    koduravi_text.pack(padx=10, pady=10)

    CTkLabel(valja_kirjutamine_aken, text="P√§evade arv haiglas:", font=("Nunito", 16, "bold"), text_color="#008ba9").pack(padx=10, pady=5)
    paevad_haiglas=ttk.Spinbox(valja_kirjutamine_aken, from_=0, to=100, increment=1, width=5)
    paevad_haiglas.pack(padx=10, pady=10)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–≤–µ—Ç–æ–≤
    CTkButton(valja_kirjutamine_aken, text="Saada kiri", command=lambda: saada_kiri(isikukood), fg_color="#55b3d9", hover_color="#008ba9", font=("Nunito", 16, "bold"), text_color="white").pack(pady=10)


def generate_nonce(length=16):
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))

def create_payment():
    """ –û–ø–ª–∞—Ç–∞ –∑–∞ –∫–æ–ª-–≤–æ –¥–Ω–µ–π –≤ –±–æ–ª—å–Ω–∏—Ü–µ (—Å—Å—ã–ª–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç—Å—è –∫ —Ç–µ–∫—Å—Ç—É –ø–∏—Å—å–º–∞) """
    global payment_reference, paevad_hailglas
    # EveryPay –¥–∞–Ω–Ω—ã–µ
    API_URL = "https://igw-demo.every-pay.com/api/v4/payments/oneoff"
    API_AUTH = "ZTM2ZWI0MGY1ZWM4N2ZhMjo3YjkxYTNiOWUxYjc0NTI0YzJlOWZjMjgyZjhhYzhjZA=="
    API_USERNAME = "e36eb40f5ec87fa2"
    ACCOUNT_NAME = "EUR3D1"
    CUSTOMER_URL = "https://maksmine.web.app/makse"

    payment_reference = ""  # –ì–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–ª–∞—Ç–µ–∂–∞

    amount = float(paevad_haiglas.get()) * 2.50

    data = {
        "api_username": API_USERNAME,
        "account_name": ACCOUNT_NAME,
        "amount": amount,
        "order_reference": str(random.randint(100000, 999999)),
        "nonce": generate_nonce(),
        "timestamp": datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%SZ"),
        "customer_url": CUSTOMER_URL
    }

    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Basic {API_AUTH}"
    }

    response = requests.post(API_URL, headers=headers, data=json.dumps(data))

    if response.status_code == 201:
        payment_info = response.json()
        return payment_info["payment_link"]
    else:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂: {response.status_code}\n{response.text}")
        return None


def saada_kiri(isikukood):
    """ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ (—Å —Å–æ–≤–µ—Ç–∞–º–∏ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º –ª–µ—á–µ–Ω–∏—è –æ—Ç –≤—Ä–∞—á–∞ + —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π –≤ –±–æ–ª—å–Ω–∏—Ü–µ) """
    selected_item = tree.selection() 
    if selected_item:
        email = patient_data[2]
        isikukood = patient_data[3]

        payment_link = create_payment()
        kiri="Koduravi: "+koduravi_text.get("1.0","end")+f"\nVoodip√§evatasu tasumiseks haiglas j√§rgige linki: {payment_link}"  # –¥–æ–º–∞—à–Ω–µ–µ –ª–µ—á–µ–Ω–∏–µ + —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É

        smtp_server="smtp.gmail.com"
        port=587
        sender_email="mariia.smolina@gmail.com"
        password="utnh zlza okne zbps" # Teie rakenduse v√µti
        context=ssl.create_default_context()
        msg=EmailMessage()
        msg.set_content(kiri) 
        msg['Subject']="Koduravi ja arve"
        msg['From']=f"Tallinna Haigla - Arst {nimi}"
        msg['To']=email  
        try:
            server=smtplib.SMTP(smtp_server,port)
            server.starttls(context=context)
            server.login(sender_email,password)
            server.send_message(msg)
            messagebox.showinfo("Informatsioon","Kiri oli saadetud")

            tree.delete(selected_item)  # –£–¥–∞–ª–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã, –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞
            conn = sqlite3.connect("Arvestus/AppData/haigla.db")
            cursor = conn.cursor()
            cursor.execute("DELETE FROM patsiendid WHERE isikukood=?", (isikukood,))
            conn.commit()
            conn.close()
        except Exception as e:
            messagebox.showerror("Tekkis viga!",e)
        finally:
            server.quit()


#--- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—É --------------------------------------------------------------
def validate_data():
    """ –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∞–≤–∏–ª—å–Ω—ã –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ """

    eesnimi=entries["Eesnimi"].get()
    perekonnanimi=entries["Perekonnanimi"].get()
    email=entries["E-mail"].get()
    isikukood=entries["Isikukood"].get()
    kaal=entries["Kaal (kg)"].get()
    pikkus=entries["Pikkus (cm)"].get()
    temperatuur=entries["Temperatuur"].get()
    kaebus=entries["Kaebus"].get("1.0", tk.END).strip()
    palat=int(entries["Palati number"].get().strip())

    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —á–µ–∫–±–æ–∫—Å–æ–≤ –¥–ª—è –¥–∏–µ—Ç—ã
    dieet_baas=entries["Dieet_baas"].get()
    dieet_diabeet=entries["Dieet_diabeet"].get()
    dieet_laktoos=entries["Dieet_laktoos"].get()

    if not eesnimi or not perekonnanimi:
        tk.messagebox.showerror("Viga", "Ees- ja Perekonnanimi on kohustuslik!")
        return False
    if not kaebus:
        tk.messagebox.showerror("Viga", "Kaebus on kohustuslik!")
        return False
    if "@" not in email or "." not in email:
        tk.messagebox.showerror("Viga", "E-mail peab olema korrektne!")
        return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤–µ—Å, —Ä–æ—Å—Ç, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - —á–∏—Å–ª–∞
    try:
        float(kaal)
        float(pikkus)
        float(temperatuur)
    except:
        tk.messagebox.showerror("Viga", "Sisend peab olema arv!")
        return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –¥–∏–µ—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞
    if not (dieet_baas or dieet_diabeet or dieet_laktoos):
        tk.messagebox.showerror("Viga", "Valige v√§hemalt √ºks dieet!")
        return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–∏–∫–æ–¥–∞
    teade=kontrolli_ikood(isikukood)
    if teade is not True:
        tk.messagebox.showerror("Viga", teade)
        return False

    conn=sqlite3.connect("Arvestus/AppData/haigla.db") 
    cursor=conn.cursor()
    cursor.execute("""
    SELECT 
        (SELECT COUNT(*) FROM patsiendid WHERE isikukood = ?) AS isikukood_count,
        (SELECT COUNT(*) FROM patsiendid WHERE palati_nr = ?) AS palati_count 
        """, (isikukood, palat))

    isikukood_arv, patsientide_arv=cursor.fetchone()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –≤ –ø–∞–ª–∞—Ç–µ
    if patsientide_arv>=4:
        tk.messagebox.showerror("Viga", f"Palatis {palat} on juba t√§is!")
        return False

    # –ï—Å–ª–∏ –∏—Å–∏–∫—É–∫–æ–¥ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É
    if isikukood_arv>0:
        tk.messagebox.showerror("Viga", "Isikukood on juba registreeritud!")
        conn.close()
        return False

    conn.close()
    return True


def clear_entries():
    """ –û—á–∏—â–∞–µ—Ç –≤—Å–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ """
    for key, entry in entries.items():
        if isinstance(entry, CTkEntry):
            entry.delete(0, tk.END)
        elif isinstance(entry, CTkComboBox):
            entry.set("")  # –û—á–∏—Å—Ç–∫–∞ –∫–æ–º–±–æ–±–æ–∫—Å–∞
        elif isinstance(entry, CTkTextbox):
            entry.delete("1.0", tk.END)
        elif isinstance(entry, CTkSpinbox):  
            entry.set(0)   # –°–±—Ä–æ—Å –∑–Ω–∞—á–µ–Ω–∏—è —Å–ø–∏–Ω–±–æ–∫—Å–∞ –Ω–∞ 0
        elif isinstance(entry, IntVar):  # –°–±—Ä–æ—Å —á–µ–∫–±–æ–∫—Å–æ–≤
            entry.set(0)

             
def lisa_patsient():
    """ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ """
    global entries

    lisa_patsient_aken=tk.Toplevel()
    lisa_patsient_aken.title("Patsiendi andmete sisetamine")
    lisa_patsient_aken.geometry("480x600")
    lisa_patsient_aken.configure(bg="#f5f6f7") 
    lisa_patsient_aken.resizable(0,0) 

    # –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞
    labels=["Eesnimi", "Perekonnanimi", "E-mail", "Isikukood", "Kaal (kg)", "Pikkus (cm)", "Verer√µhk", "Temperatuur", "Kaebus", "Dieet", "Arst", "Palati number"]
    entries={}

    for i, label in enumerate(labels):
        ttk.Label(lisa_patsient_aken, text=label, font=("Nunito", 11, "bold"), background="#f5f6f7").grid(row=i, column=0, padx=10, pady=5, sticky="w")
        if label=="Dieet":
            # –°–æ–∑–¥–∞–µ–º Frame –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
            dieet_frame=tk.Frame(lisa_patsient_aken)
            dieet_frame.grid(row=i, column=1, padx=10, pady=5, sticky="w")
            dieet_frame.configure(bg="#f5f6f7")

            # –°–æ–∑–¥–∞—ë–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
            dieet_baas_var=IntVar()   # IntVar - —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤ Tkinter, –∫–æ—Ç–æ—Ä–∞—è —Å–≤—è–∑—ã–≤–∞–µ—Ç —á–µ–∫–±–æ–∫—Å —Å –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º (–≤—ã–±—Ä–∞–Ω/–Ω–µ –≤—ã–±—Ä–∞–Ω)
            dieet_diabeet_var=IntVar()
            dieet_laktoos_var=IntVar()

            # –°–æ–∑–¥–∞—ë–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —á–µ–∫–±–æ–∫—Å—ã
            dieet_baas=CTkCheckBox(dieet_frame, text="Baasdieet", font=("Nunito", 13), variable=dieet_baas_var, fg_color="#55b3d9", hover_color="#008ba9")
            dieet_baas.grid(row=0, column=0, padx=5, sticky="w")

            dieet_diabeet=CTkCheckBox(dieet_frame, text="Diabeetiline", font=("Nunito", 13), variable=dieet_diabeet_var, fg_color="#55b3d9", hover_color="#008ba9")
            dieet_diabeet.grid(row=0, column=1, padx=5, sticky="w")

            dieet_laktoos=CTkCheckBox(dieet_frame, text="Laktoosivaba", font=("Nunito", 13), variable=dieet_laktoos_var, fg_color="#55b3d9", hover_color="#008ba9")
            dieet_laktoos.grid(row=0, column=2, padx=5, sticky="w")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ–∫–±–æ–∫—Å—ã –≤ entries
            entries["Dieet_baas"]=dieet_baas_var
            entries["Dieet_diabeet"]=dieet_diabeet_var
            entries["Dieet_laktoos"]=dieet_laktoos_var

        elif label=="Kaebus":
            entry=CTkTextbox(lisa_patsient_aken, height=100, width=250, fg_color="white")
            entry.grid(row=i, column=1, padx=10, pady=5, sticky="w")

        elif label=="Arst":
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π —Å –∏—Ö ID –∏ –∏–º–µ–Ω–∞–º–∏
            conn=sqlite3.connect("Arvestus/AppData/haigla.db")  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            cursor=conn.cursor()
            cursor.execute("SELECT id, nimi FROM kasutajad WHERE amet='arst'")
            arstid=cursor.fetchall()

            # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –≤—Ä–∞—á–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Combobox
            arstide_nimed=[arst[1] for arst in arstid] 
            entry=CTkComboBox(lisa_patsient_aken, values=arstide_nimed)
            entry.grid(row=i, column=1, padx=10, pady=5, sticky="w")
            cursor.close()  
            conn.close()

        elif label=="Verer√µhk":
           # –°–æ–∑–¥–∞–µ–º Frame –¥–ª—è –¥–∞–≤–ª–µ–Ω–∏—è
            rohk_frame=CTkFrame(lisa_patsient_aken)
            rohk_frame.grid(row=i, column=1, columnspan=2, padx=5, pady=5, sticky="w")
            rohk_frame.configure(fg_color="#f5f6f7")
            
            # –í–µ—Ä—Ö–Ω–µ–µ (—Å–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ) –¥–∞–≤–ª–µ–Ω–∏–µ
            tk.Label(rohk_frame, text="√úlemine", bg="#f5f6f7", font=("Nunito", 10)).grid(row=0, column=0, padx=(0,5))
            entries["R√µhk_√ºl"]=CTkSpinbox(rohk_frame, start_value=120, min_value = 90, max_value = 200, scroll_value=1, step_value=10, border_color="#f5f6f7", fg_color="#EEEEEE", font=("Nunito", 16, "bold"))
            entries["R√µhk_√ºl"].grid(row=0, column=1)

            # –ù–∏–∂–Ω–µ–µ (–¥–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ) –¥–∞–≤–ª–µ–Ω–∏–µ
            tk.Label(rohk_frame, text="Alumine", bg="#f5f6f7", font=("Nunito", 10)).grid(row=0, column=2, padx=(10,5))
            entries["R√µhk_al"]=CTkSpinbox(rohk_frame, start_value=80, min_value=50, max_value=130, scroll_value=1, step_value=10, border_color="#f5f6f7", font=("Nunito", 16, "bold"), fg_color="#EEEEEE")
            entries["R√µhk_al"].grid(row=0, column=3)
            continue

        elif label=="Palati number":
            entry=CTkComboBox(lisa_patsient_aken, values=["1", "2", "3", "4", "5", "6"])
            entry.grid(row=i, column=1, padx=10, pady=5, sticky="w")

        else:
            entry=CTkEntry(lisa_patsient_aken, width=250, border_color="#55b3d9")
            entry.grid(row=i, column=1, padx=10, pady=5, sticky="w")
        entries[label]=entry

         # –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (—Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞)
        today_date=datetime.today().strftime("%Y-%m-%d")
        entries["registreerimise_aeg"]=today_date  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–ª–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç "Isikukood"
        def check_palati():
            isikukood=entries["Isikukood"].get()
            if isikukood and isikukood[0] in ["1","3","5"]:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–∞–ª–∞—Ç—ã 4, 5, 6
                entries["Palati number"].configure(values=["4","5","6"])
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–∞–ª–∞—Ç—ã 1, 2, 3
                entries["Palati number"].configure(values=["1","2","3"])

    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–æ–ª–µ "Isikukood"
    entries["Isikukood"].bind("<KeyRelease>", lambda event: check_palati())   # "<KeyRelease>" - –∫–æ–≥–¥–∞ –∫–ª–∞–≤–∏—à–∞ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –æ—Ç–ø—É—Å–∫–∞–µ—Ç—Å—è

    # –ö–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –æ—á–∏—Å—Ç–∫–∏
    nuppude_frame=tk.Frame(lisa_patsient_aken)
    nuppude_frame.grid(row=len(labels) + 1, column=0, columnspan=2, pady=20)
    nuppude_frame.configure(bg="#f5f6f7")

    lisa_nupp=CTkButton(nuppude_frame, text="Registreeri patsient", command=insert_data, fg_color="#55b3d9", hover_color="#008ba9", font=("Nunito", 16, "bold"), text_color="white")
    lisa_nupp.pack(side="left", padx=10, pady=(0, 10))

    kustuta_nupp=CTkButton(nuppude_frame, text="Puhasta v√§ljad", command=clear_entries, fg_color="#55b3d9", hover_color="#008ba9", font=("Nunito", 16, "bold"), text_color="white")
    kustuta_nupp.pack(side="left", padx=10, pady=(0, 10))

    lisa_patsient_aken.mainloop()


def vali_dieet():
    """ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∏–µ—Ç—ã """
    dieet_baas=entries["Dieet_baas"].get()
    dieet_diabeet=entries["Dieet_diabeet"].get()
    dieet_laktoos=entries["Dieet_laktoos"].get()

    valitud_dieet=[]

    if dieet_baas:
        valitud_dieet.append("Baasdieet")
    if dieet_diabeet:
        valitud_dieet.append("Diabeetiline")
    if dieet_laktoos:
        valitud_dieet.append("Laktoosivaba")

    return ", ".join(valitud_dieet)



def saada_arsti_id():
    """ –ü–æ–ª—É—á–∞–µ–º –∏–º—è –≤—Ä–∞—á–∞, –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤ –∫–æ–º–±–æ–±–æ–∫—Å–µ """
    valitud_arst=entries["Arst"].get()
    connection=sqlite3.connect("Arvestus/AppData/haigla.db")
    cursor=connection.cursor()

    cursor.execute("SELECT id FROM kasutajad WHERE nimi=?", (valitud_arst,))
    arst_id=cursor.fetchone()

    connection.close()

    if arst_id:
        return arst_id[0] # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –≤—Ä–∞—á–∞
    else:
        return None


def insert_data():
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö """
    if validate_data():
        connection=sqlite3.connect("Arvestus/AppData/haigla.db")
        cursor=connection.cursor()

        cursor.execute("""
            INSERT INTO patsiendid (eesnimi, perekonnanimi, email, isikukood, kaal, pikkus, ylemine_rohk, madalam_rohk, temperatuur, kaebus, dieet, palati_nr, arst_ID, diagnoos, staatus)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            entries["Eesnimi"].get(),
            entries["Perekonnanimi"].get(),
            entries["E-mail"].get(),
            entries["Isikukood"].get(),
            entries["Kaal (kg)"].get(),
            entries["Pikkus (cm)"].get(),
            entries["R√µhk_√ºl"].get(),
            entries["R√µhk_al"].get(),
            entries["Temperatuur"].get(),
            entries["Kaebus"].get("1.0", tk.END).strip(),
            vali_dieet(),
            entries["Palati number"].get(),
            saada_arsti_id(),
            "Tundmatu",
            "Ootab arsti l√§bivaatust"))

        connection.commit()
        connection.close()

        messagebox.showinfo("Edu", "Patsient on registreeritud s√ºsteemi!")


# --- –ü–æ–∏—Å–∫ –∏ –æ–±–Ω–æ–≤–∏—Ç—å -------------------------------------------------------------------

def on_search():
    search_query=search_entry.get()
    load_data_from_db(tree, search_query)

def load_data_from_db(tree, search_query="", arst_nimi=None):
    """ –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite –∏ –≤—Å—Ç–∞–≤–ª—è–µ—Ç –∏—Ö –≤ —Ç–∞–±–ª–∏—Ü—É """
    # –û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É Treeview –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    for item in tree.get_children():
        tree.delete(item)

    conn=sqlite3.connect("Arvestus/AppData/haigla.db")
    cursor=conn.cursor()

    if arst_nimi:  # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏ –≤—Ä–∞—á–∞
        cursor.execute(""" 
        SELECT p.eesnimi, p.perekonnanimi, p.isikukood, p.registreerimise_aeg, p.palati_nr, k.nimi AS arst_nimi, p.diagnoos, p.staatus 
        FROM patsiendid p 
        LEFT JOIN kasutajad k ON p.arst_ID = k.id 
        WHERE k.nimi = ? """,(arst_nimi,))
    elif search_query:
        cursor.execute(""" 
        SELECT p.eesnimi, p.perekonnanimi, p.isikukood, p.registreerimise_aeg, p.palati_nr, k.nimi AS arst_nimi, p.diagnoos, p.staatus 
        FROM patsiendid p 
        INNER JOIN kasutajad k ON p.arst_ID=k.id 
        WHERE p.isikukood LIKE ? """, ('%' + search_query + '%',))
    else:
        cursor.execute(""" 
        SELECT p.eesnimi, p.perekonnanimi, p.isikukood, p.registreerimise_aeg, p.palati_nr, k.nimi AS arst_nimi, p.diagnoos, p.staatus 
        FROM patsiendid p 
        INNER JOIN kasutajad k ON p.arst_ID=k.id """)

    rows=cursor.fetchall()

    # –î–æ–±–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É (tree)
    for row in rows:
        tree.insert("", "end", values=row)

    conn.close()


#----------------------------------------------------------------------------------------------
def osakond_aken():
    """ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ —Å –∫–∞—Ä—Ç–æ–π –ø–∞–ª–∞—Ç –æ—Ç–¥–µ–ª–µ–Ω–∏—è """

    osakond_aken=tk.Toplevel(peamine_aken) 
    osakond_aken.title("Oskonna kaart")
    osakond_aken.geometry("400x500")

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ª–∞—Ç–µ
    info_label=CTkLabel(osakond_aken, text="Valige palat, et kuvada patsiendid\nNaiste palatid nr: 1 - 3\nMeeste palatid nr: 4 - 6", anchor="w", justify="left", font=("Nunito", 16, "bold"))
    info_label.grid(row=2, column=0, columnspan=3, padx=10, pady=10)

    def naita_patsiendi_info(palati_nr):
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ª–∞—Ç–µ
        conn=sqlite3.connect("Arvestus/AppData/haigla.db")
        cursor=conn.cursor()
        cursor.execute("""SELECT eesnimi, perekonnanimi, isikukood 
                          FROM patsiendid 
                          WHERE palati_nr = ? """, (palati_nr,))
        patsiendid=cursor.fetchall()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ü–∏–µ–Ω—Ç–∞—Ö
        if len(patsiendid)>0:
            patsiendi_info_palatis="" 
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –ø–∞—Ü–∏–µ–Ω—Ç—É
            for p in patsiendid:
                patsiendi_info_palatis+="\n"+p[0]+" "+p[1]+" - "+p[2]+"\n" # –∏–º—è, —Ñ–∞–º–∏–ª–∏—è, –∏—Å–∏–∫—É–∫–æ–¥
        else:
             patsiendi_info_palatis="\nEi ole patsiente selles palatis"

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞—Ü–∏–µ–Ω—Ç–∞—Ö
        info_label.configure(text=f"Palat nr {palati_nr}:\n{patsiendi_info_palatis}", font=("Nunito", 14))

    rows=[0,0,0,1,1,1]  # —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞–ª–∞—Ç—ã
    cols=[0,1,2,0,1,2]  # –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞–ª–∞—Ç—ã

    for i in range(6):  # 6 –ø–∞–ª–∞—Ç
        row=rows[i]  
        col=cols[i] 

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –≤ –ø–∞–ª–∞—Ç–µ
        conn=sqlite3.connect("Arvestus/AppData/haigla.db")
        cursor=conn.cursor()
        cursor.execute("""SELECT eesnimi, perekonnanimi, isikukood 
                            FROM patsiendid 
                            WHERE palati_nr = ? """, (i + 1,))
        patsiendid=cursor.fetchall()

        # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –º–µ–Ω—è–µ–º —Ü–≤–µ—Ç
        if len(patsiendid)==4:
            varv="#FF3131"  # –ü–∞–ª–∞—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–Ω—è—Ç–∞
        elif len(patsiendid)>=2:
            varv="#FFFF8F"  # 2 –∏–ª–∏ 3 –ø–∞—Ü–∏–µ–Ω—Ç–∞
        else:
            varv="#50C878"  # 1 –∏–ª–∏ 0 –ø–∞—Ü–∏–µ–Ω—Ç–∞

        room=CTkLabel(osakond_aken, text=f"PALAT NR {i+1}", font=("Nunito", 16, "bold"), fg_color=varv, corner_radius=10, width=112, height=112)
        room.grid(row=row, column=col, padx=10, pady=10)

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –∫–ª–∏–∫ –ø–æ –º–µ—Ç–∫–µ
        room.bind("<Button-1>", lambda event, palati_nr=i+1: naita_patsiendi_info(palati_nr))

    conn.close()


sisselogimine_aken()