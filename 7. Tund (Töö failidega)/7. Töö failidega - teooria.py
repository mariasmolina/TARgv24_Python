# -- Töö failidega (teooria) --


f = open('file.txt', 'r') # Метод open() дает команду программе открыть файл 'file.txt', а 'r' указывает, что файл будет открыт для чтения

'r' # reading - чтение
# Когда ты открываешь файл в режиме 'r', файл должен существовать. Если его нет, то программа вызовет ошибку
# В этом режиме ты можешь только читать файл, но не можешь в него записывать

'w' # writing - запись
# Если файл с таким именем уже существует, его содержимое будет удалено, и файл будет перезаписан
# Если файла нет, то он будет создан

'a' # appending - добавление
# Если файл существует, то данные будут добавлены в конец файла, без удаления старого содержимого
# Если файл не существует, то он будет создан.



# Tekst failist salvestame järjendisse / Сохранение текста из файла в список
def Loe_failist(fail:str)->list:
 f=open(fail,'r',encoding="utf-8-sig")    # Открывает файл с именем fail  режиме чтения ('r') и использует кодировку "utf-8-sig", чтобы корректно обрабатывать текст
 jarjend=[]         # Создает пустой список jarjend, в который будут добавляться строки из файла
 for rida in f:     # Запускает цикл, который поочередно читает строки из файла
 jarjend.append(rida.strip())      # Метод .strip() удаляет лишние пробелы и символы новой строки (\n) в начале и конце строки.
 f.close()          # Закрывает файл
 return jarjend     # Возвращает список jarjend, содержащий все строки из файла (без пустых символов в начале и конце каждой строки)


# Järjendite elemendid salvestame failisse / Сохранение элементов списка в файл
def Kirjuta_failisse(fail:str,jarjend:list):   
 f=open(fail,'w',encoding="utf-8-sig")    # Открывает файл с именем fail в режиме записи ('w' – write)
 for line in jarjend:    # Запускает цикл по элементам списка jarjend, где каждый элемент line – это строка
 f.write(line+'\n')      # Записывает строку line в файл, + '\n' добавляет символ новой строки (\n), чтобы каждая запись была с новой строки в файле
 f.close()



file.read(n)  # Читает первые n символов из файла. Если параметр n не указан или равен пустому значению (например, None), то метод читает весь файл целиком
file.readline(n) # Читает одну строку из файла, но не более чем n символов в этой строке
file.readlines(n) # Читает n строк из файла, где n — это количество строк, которые нужно прочитать. Если n не указано, метод прочитает все строки файла



# -- Закрытие файла -- 
close()
# Метод используется для закрытия открытого файла. 
# После закрытия файла, ты не можешь его читать или записывать в него, потому что ресурс (файл) уже освобожден


# -- Использование with для автоматического закрытия файлов --
# Когда ты открываешь файл через конструкцию with, Python автоматически закроет файл после выполнения блока кода, даже если произойдут ошибки
with open('file.txt', 'r') as f:
 print(f.read())    # Читаем весь файл и выводим на экран


 # -- Чтение файла построчно с помощью with --\
 # В цикле for каждая строка файла будет присваиваться переменной line и выводиться на экран
 with open("file.txt") as f:
    for line in f:
        print(line) \


# -- Удаление файла с помощью модуля os --
from os import *
if path.isfile("fail.txt"): # Проверяем, существует ли файл
 remove("fail.txt") # Если файл существует, удаляем его

path.isdir("kaust")  # Проверяет, существует ли каталог с именем "kaust"